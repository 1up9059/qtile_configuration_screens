He's how to use hooks...

first, I altered hook.py to include:

bq. def Hook(event):
    def callHook(f):
        subscribe._subscribe(event, f)
    return callHook

although this does alter the libqtile files though...
then I put this in my config:

from libqtile.hook import Hook

@class ClientSpec:
    def __init__(self, group, name=None, wmclass=None):
        self.group = group
        self.name = name
        self.wmclass = wmclass
        if self.name is None and self.wmclass is None:
            raise TypeError, "Either a name or a wmclass must be specified"

    def apply(self, client):
        if self.wmclass:
            cliinfo = client.cmd_inspect()
            cliclass = cliinfo['wm_class']
        else:
            cliclass = ()
        if client.name == self.name or self.wmclass in cliclass:
            client.togroup(self.group)

rules = [ ClientSpec(wmclass='XTerm', group="term"),
              ClientSpec(wmclass='Chrome', group="inet"),
              ClientSpec(name='leo', wmclass='Leo', group="edit"),
              ClientSpec(wmclass='Emacs', group="edit")]

@Hook("client_new")
def apply_rules(client):
    global rules
    if client is None:
        return
    for rule in rules:
        rule.apply(client)@
